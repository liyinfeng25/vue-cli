#!/usr/bin/env node

const download = require('download-git-repo')
const program = require('commander')
const exists = require('fs').existsSync
const path = require('path')
const ora = require('ora')
const home = require('user-home')
const tildify = require('tildify')
const chalk = require('chalk')
const inquirer = require('inquirer')
const rm = require('rimraf').sync
const logger = require('../lib/logger')
const generate = require('../lib/generate')
const checkVersion = require('../lib/check-version')
const warnings = require('../lib/warnings')
const localPath = require('../lib/local-path')

const isLocalPath = localPath.isLocalPath
const getTemplatePath = localPath.getTemplatePath

/**
 * Usage.
 */

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')

/**
 * Help.
 */

program.on('--help', () => {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with an official template'))
  console.log('    $ vue init webpack my-project')
  console.log()
  console.log(chalk.gray('    # create a new project straight from a github template'))
  console.log('    $ vue init username/repo my-project')
  console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Settings.
 */
// 获取模板名称
let template = program.args[0] 
// 模板名称是否有斜杠(判断是官方模板还是非官方模板)
const hasSlash = template.indexOf('/') > -1  
// 获取项目名称
const rawName = program.args[1]  
// 检查项目名称是否为空 || 是否是 .
const inPlace = !rawName || rawName === '.' 
const name = inPlace ? path.relative('../', process.cwd()) : rawName
const to = path.resolve(rawName || '.')
// 是否采用 clone 方式下载模板，默认是false
const clone = program.clone || false

// 将模板下载到 .vue-templates 路径，并非直接下载到创建项目的路径（缓存）
const tmp = path.join(home, '.vue-templates', template.replace(/[\/:]/g, '-'))

if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}

/**
 * Padding.
 */

console.log()
process.on('exit', () => {
  console.log()
})

// 检查项目名称不通过 || 已经存在项目目录，让用户进行选择是否继续
if (inPlace || exists(to)) {
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }]).then(answers => {
    if (answers.ok) {
      run()
    }
  }).catch(logger.fatal)
} else {
  run()
}

/**
 * Check, download and generate the project.
 */

// 检查、下载、生成对应文件到当前目录（核心函数） 
function run () {
  // 检查模板是否是本地模本，/^[./]|(^[a-zA-Z]:)/.test('webpack') 使用本地模板
  if (isLocalPath(template)) {
    // 确认项目目录
    const templatePath = getTemplatePath(template)
    // 检查项目目录是否存在
    if (exists(templatePath)) {
      // 使用本地模板
      generate(name, templatePath, to, err => {
        if (err) logger.fatal(err)
        console.log()
        logger.success('Generated "%s".', name)
      })
    } else {
      logger.fatal('Local template "%s" not found.', template)
    }
  } else {
    // 首先会检查对应node版本和vue-cli是否存在新版本
    checkVersion(() => {
      // 没有 /，代表使用官方模板
      if (!hasSlash) {
        // 官方模板路径：vuejs-templates/webpack
        const officialTemplate = 'vuejs-templates/' + template
        if (template.indexOf('#') !== -1) {
          downloadAndGenerate(officialTemplate)
        } else {
          if (template.indexOf('-2.0') !== -1) {
            warnings.v2SuffixTemplatesDeprecated(template, inPlace ? '' : name)
            return
          }

          // warnings.v2BranchIsNowDefault(template, inPlace ? '' : name)
          downloadAndGenerate(officialTemplate)
        }
      } else {
        // 有 /，代表使用非官方模板，如：vue init my-templates/webpack my-project，https://github.com/my-templates/webpack
        downloadAndGenerate(template)
      }
    })
  }
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

// 下载远程模板：使用 download-git-repo 来下载对应的模块仓库，传入的变量最终拼接成：https://github.com/vuejs-templates/webpack
function downloadAndGenerate (template) {
  const spinner = ora('downloading template')
  spinner.start()
  // Remove if local template exists
  if (exists(tmp)) rm(tmp)

  // 下载模板
  download(template, tmp, { clone }, err => {
    spinner.stop()
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    
    // 进行用户提问，确认：项目名称、项目描述、项目创建者、等等信息
    generate(name, tmp, to, err => {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  })
}
